// Generated by CoffeeScript 1.6.3
(function() {
  var dyna,
    _this = this;

  dyna = this.dyna;

  console.log('dyna', dyna);

  Template.b3Alert.events({
    'keyup input.identity': function(e, t) {
      var alert, cb, confirm_cb, initial_cb,
        _this = this;
      dyna.identity = e.target.value;
      alert = this._id;
      initial_cb = function(e, t) {
        console.log('initial cb fired', alert);
        console.log('dyna', dyna);
        b3.Alert.prototype.remove(alert);
        return dyna.identifyUnconfirmed(e, t, alert);
      };
      confirm_cb = function(e, t) {
        console.log('confirm cb fired', alert);
        console.log('dyna', dyna);
        b3.Alert.prototype.remove(alert);
        return dyna.confirmIdentity(e, t, alert);
      };
      cb = initial_cb;
      if (dyna.confirmation === true) {
        cb = confirm_cb;
      }
      return dyna.inputThrottle(e, t, cb);
    },
    'keyup input.password': function(e, t) {
      var alert, back_cb, new_cb,
        _this = this;
      dyna.password = e.target.value;
      alert = this._id;
      back_cb = dyna.passBack(e, t, function() {
        console.log('passBack cb fired');
        b3.Alert.prototype.remove(alert);
      });
      new_cb = dyna.passNew(e, t, function() {
        console.log('passNew cn fired');
        return b3.Alert.prototype.remove(alert);
      });
      return dyna.inputThrottle(e, t, cb);
    },
    'keydown input': function(e, t) {
      if (e.keyCode === 13) {
        e.preventDefault();
      }
    },
    'click button.enterPassword': function(e, t) {
      var step;
      step = Session.get('dynaStep');
      console.log('button at step;', step);
      if (step === 3) {
        return dyna.signUpNew(e, t);
      }
      if (step === 4) {
        return dyna.signBack(e, t);
      }
    },
    'click button.identity': function(e, t) {
      var alert, cb, confirm_cb, i, initial_cb,
        _this = this;
      console.log('click identity', e, t);
      i = t.find('input');
      dyna.identity = $(i).val();
      alert = this._id;
      initial_cb = function(e, t) {
        console.log('initial cb fired', alert);
        console.log('dyna', dyna);
        b3.Alert.prototype.remove(alert);
        return dyna.identifyUnconfirmed(e, t, alert);
      };
      confirm_cb = function(e, t) {
        console.log('confirm cb fired', alert);
        console.log('dyna', dyna);
        b3.Alert.prototype.remove(alert);
        return dyna.confirmIdentity(e, t, alert);
      };
      cb = initial_cb;
      if (dyna.confirmation === true) {
        cb = confirm_cb;
      }
      return dyna.inputThrottle(e, t, cb);
    },
    'click button.changeUser': function(e, t) {
      dyna.reset();
      Session.set('dynaStep', 1);
      return dyna.nextStep();
    }
  });

  this.b3.promptIdentity = this.b3.Alert.prototype.curry({
    dialog: true,
    region: 'middleCenter',
    type: 'info',
    block: 'alert-block',
    inputType: 'email',
    selectClass: 'identity',
    header: 'Identification',
    label: 'Please enter your e-mail',
    placeholder: 'e-mail ...',
    icon: 'glyphicon glyphicon-envelope'
  });

  this.b3.promptPassword = this.b3.Alert.prototype.curry({
    dialog: true,
    confirmation: true,
    label: 'Minimum 6 characters.',
    type: 'info',
    buttonText: "",
    region: 'middleCenter',
    block: 'alert-block',
    inputType: 'password',
    selectClass: 'enterPassword',
    header: 'Enter Password',
    icon: "glyphicon glyphicon-log-in"
  });

  this.b3.confirmIdentity = this.b3.Alert.prototype.curry({
    dialog: true,
    confirmation: true,
    showAltButton: true,
    region: 'middleCenter',
    altButtonText: " change e-mail.",
    altSelectClass: "changeUser",
    type: 'info',
    selectClass: 'identity',
    block: 'alert-block',
    inputType: 'text',
    header: 'New?',
    icon: 'glyphicon glyphicon-envelope'
  });

  dyna.nextStep = function() {
    var step;
    step = Session.get('dynaStep');
    console.log('step', step);
    dyna.resetThrottle();
    switch (Session.get('dynaStep')) {
      case 0:
      case 1:
        if (!dyna.valid) {
          _this.b3.promptIdentity('Invalid', {
            value: dyna.identity,
            header: dyna.userEmail,
            type: 'warning'
          });
        } else {
          _this.b3.promptIdentity();
        }
        break;
      case 2:
        dyna.confirmation = true;
        if (!dyna.valid) {
          _this.b3.confirmIdentity('Invalid', {
            value: dyna.identity,
            type: 'danger'
          });
        } else {
          _this.b3.confirmIdentity('Please confirm:', {
            value: dyna.identity,
            label: dyna.emailMaybe
          });
        }
        break;
      case 3:
      case 4:
        if (!dyna.valid) {
          _this.b3.promptPassword('Invalid', {
            type: 'warning'
          });
        } else {
          _this.b3.promptPassword();
        }
        break;
    }
  };

  dyna.reset = function() {
    Session.set('dynaStep', 0);
    dyna.userEmail = 'invalid e-mail';
    dyna.userExisting = false;
    dyna.confirmation = false;
    dyna.valid = true;
    _this.b3.Alert.prototype.clearAll();
    return true;
  };

  dyna.passwordReset = function() {
    return this.b3.confirmIdentity('Confirm e-mail for password reset', {
      header: dyna.emailMaybe,
      type: 'info',
      selectClass: 'forgotPassword'
    });
  };

  Template.dynaSignButton.created = function() {
    return dyna.reset();
  };

  Template.dynaSignButton.button = function() {
    var step;
    step = Session.get('dynaStep');
    console.log('dynaStep', step);
    switch (step) {
      case 0:
      case 1:
        return {
          text: 'Authenticate',
          style: 'btn-primary',
          icon: 'glyphicon-log-in'
        };
      case 2:
        return {
          text: dyna.emailMaybe,
          style: 'btn-danger',
          icon: 'glyphicon-remove-sign'
        };
      case 3:
        return {
          text: dyna.emailMaybe,
          style: 'btn-danger',
          icon: 'glyphicon-remove-sign'
        };
      case 4:
        if (dyna.userExisting) {
          return {
            text: 'Forgot Password',
            style: 'btn-default',
            icon: 'glyphicon-question-sign'
          };
        }
        break;
      default:
        return {
          text: "logout: " + dyna.emailMaybe,
          style: 'btn-danger btn-xs',
          icon: 'glyphicon-log-out'
        };
    }
  };

  Template.dynaSignButton.events({
    'click button': function() {
      console.log('dynaSignClick');
      switch (Session.get('dynaStep')) {
        case 0:
          return dyna.nextStep();
        case 1:
        case 2:
        case 3:
          dyna.reset();
          Session.set('dynaStep', 1);
          return dyna.nextStep();
        case 4:
          return dyna.passwordReset();
        case 5:
          return dyna.logout();
        default:
          return console.log('error');
      }
    }
  });

}).call(this);
